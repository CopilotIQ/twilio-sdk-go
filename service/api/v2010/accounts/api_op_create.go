// This is an autogenerated file. DO NOT MODIFY
package accounts

import (
	"context"
	"net/http"

	"github.com/RJPearson94/twilio-sdk-go/client"
	"github.com/RJPearson94/twilio-sdk-go/utils"
)

// CreateAccountInput defines the input parameters/ properties for creating a new Twilio sub account resource
type CreateAccountInput struct {
	// The human readable name of the account
	FriendlyName *string `form:"FriendlyName,omitempty"`
}

// CreateAccountResponse resource/ response properties for the created sub account
type CreateAccountResponse struct {
	// The generated authorization token for the account
	AuthToken string `json:"auth_token"`
	// The date and time (in RFC2822 format) when the resource was created
	DateCreated utils.RFC2822Time `json:"date_created"`
	// The date and time (in RFC2822 format) when the resource was last updated
	DateUpdated *utils.RFC2822Time `json:"date_updated,omitempty"`
	// The human readable name of the account
	FriendlyName string `json:"friendly_name"`
	// The SID of the parent account. Can be the same as the SID of the account
	OwnerAccountSid string `json:"owner_account_sid"`
	// The unique alphanumeric string for the resource
	Sid string `json:"sid"`
	// The current status of the account
	Status string `json:"status"`
	// The current account type
	Type string `json:"type"`
}

// Create provisions a new Twilio sub account under the current account
// See https://www.twilio.com/docs/iam/api/account#create-an-account-resource for more details
// Context is defaulted to Background. See https://golang.org/pkg/context/#Background for more information
func (c Client) Create(input *CreateAccountInput) (*CreateAccountResponse, error) {
	return c.CreateWithContext(context.Background(), input)
}

// CreateWithContext provisions a new Twilio sub account under the current account
// See https://www.twilio.com/docs/iam/api/account#create-an-account-resource for more details
func (c Client) CreateWithContext(context context.Context, input *CreateAccountInput) (*CreateAccountResponse, error) {
	op := client.Operation{
		Method:      http.MethodPost,
		URI:         "/Accounts.json",
		ContentType: client.URLEncoded,
	}

	response := &CreateAccountResponse{}
	if err := c.client.Send(context, op, input, response); err != nil {
		return nil, err
	}
	return response, nil
}
