// This is an autogenerated file. DO NOT MODIFY
package webhook

import (
	"context"
	"net/http"
	"time"

	"github.com/RJPearson94/twilio-sdk-go/client"
)

type UpdateConversationWebhookInput struct {
	ConfigurationUrl      *string   `form:"Configuration.Url,omitempty"`
	ConfigurationMethod   *string   `form:"Configuration.Method,omitempty"`
	ConfigurationFilters  *[]string `form:"Configuration.Filters,omitempty"`
	ConfigurationTriggers *[]string `form:"Configuration.Triggers,omitempty"`
	ConfigurationFlowSid  *string   `form:"Configuration.FlowSid,omitempty"`
}

type UpdateConversationWebhookResponseConfiguration struct {
	Url         *string   `json:"url,omitempty"`
	Method      *string   `json:"method,omitempty"`
	Filters     *[]string `json:"filters,omitempty"`
	Triggers    *[]string `json:"triggers,omitempty"`
	FlowSid     *string   `json:"flow_sid,omitempty"`
	ReplayAfter *int      `json:"replay_after,omitempty"`
}

type UpdateConversationWebhookResponse struct {
	Sid             string                                         `json:"sid"`
	AccountSid      string                                         `json:"account_sid"`
	ConversationSid string                                         `json:"conversation_sid"`
	Target          string                                         `json:"target"`
	Configuration   UpdateConversationWebhookResponseConfiguration `json:"configuration"`
	DateCreated     time.Time                                      `json:"date_created"`
	DateUpdated     *time.Time                                     `json:"date_updated,omitempty"`
	URL             string                                         `json:"url"`
}

func (c Client) Update(input *UpdateConversationWebhookInput) (*UpdateConversationWebhookResponse, error) {
	return c.UpdateWithContext(context.Background(), input)
}

func (c Client) UpdateWithContext(context context.Context, input *UpdateConversationWebhookInput) (*UpdateConversationWebhookResponse, error) {
	op := client.Operation{
		Method:      http.MethodPost,
		URI:         "/Conversations/{conversationSid}/Webhooks/{sid}",
		ContentType: client.URLEncoded,
		PathParams: map[string]string{
			"conversationSid": c.conversationSid,
			"sid":             c.sid,
		},
	}

	response := &UpdateConversationWebhookResponse{}
	if err := c.client.Send(context, op, input, response); err != nil {
		return nil, err
	}
	return response, nil
}
