// This is an autogenerated file. DO NOT MODIFY
package conversation

import (
	"context"
	"net/http"
	"time"

	"github.com/RJPearson94/twilio-sdk-go/client"
	"github.com/RJPearson94/twilio-sdk-go/utils"
)

type UpdateConversationInput struct {
	FriendlyName        *string            `form:"FriendlyName,omitempty"`
	DateCreated         utils.RFC2822Time  `validate:"required" form:"DateCreated"`
	DateUpdated         *utils.RFC2822Time `form:"date_updated,omitempty"`
	MessagingServiceSid *string            `form:"MessagingServiceSid,omitempty"`
	Attributes          *string            `form:"Attributes,omitempty"`
	State               *string            `form:"State,omitempty"`
	TimersInactive      *string            `form:"Timers.Inactive,omitempty"`
	TimersClosed        *string            `form:"Timers.Closed,omitempty"`
}

type UpdateConversationOutputTimers struct {
	DateInactive *time.Time `json:"date_inactive,omitempty"`
	DateClosed   *time.Time `json:"date_closed,omitempty"`
}

type UpdateConversationOutput struct {
	Sid                 string                         `json:"sid"`
	AccountSid          string                         `json:"account_sid"`
	ChatServiceSid      *string                        `json:"chat_service_sid,omitempty"`
	MessagingServiceSid *string                        `json:"messaging_service_sid,omitempty"`
	FriendlyName        *string                        `json:"friendly_name,omitempty"`
	Attributes          string                         `json:"attributes"`
	State               string                         `json:"state"`
	Timers              UpdateConversationOutputTimers `json:"timers"`
	DateCreated         time.Time                      `json:"date_created"`
	DateUpdated         *time.Time                     `json:"date_updated,omitempty"`
	URL                 string                         `json:"url"`
}

func (c Client) Update(input *UpdateConversationInput) (*UpdateConversationOutput, error) {
	return c.UpdateWithContext(context.Background(), input)
}

func (c Client) UpdateWithContext(context context.Context, input *UpdateConversationInput) (*UpdateConversationOutput, error) {
	op := client.Operation{
		HTTPMethod:  http.MethodPost,
		HTTPPath:    "/Conversations/{sid}",
		ContentType: client.URLEncoded,
		PathParams: map[string]string{
			"sid": c.sid,
		},
	}

	output := &UpdateConversationOutput{}
	if err := c.client.Send(context, op, input, output); err != nil {
		return nil, err
	}
	return output, nil
}
