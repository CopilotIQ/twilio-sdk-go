// This is an autogenerated file. DO NOT MODIFY
package assistant

import (
	"context"
	"net/http"
	"time"

	"github.com/RJPearson94/twilio-sdk-go/client"
)

// FetchAssistantResponse resource/ response properties for the retrieved assistant
type FetchAssistantResponse struct {
	// The SID of the account which the resource is associated with
	AccountSid     string  `json:"account_sid"`
	CallbackEvents *string `json:"callback_events,omitempty"`
	CallbackURL    *string `json:"callback_url,omitempty"`
	// The date and time (in RFC3339 format) when the resource was created
	DateCreated time.Time `json:"date_created"`
	// The date and time (in RFC3339 format) when the resource was last updated
	DateUpdated *time.Time `json:"date_updated,omitempty"`
	// String representation of the assistant stage/ state
	DevelopmentStage string `json:"development_stage"`
	// The human readable name of the assistant
	FriendlyName *string `json:"friendly_name,omitempty"`
	// The SID of the latest model build
	LatestModelBuildSid *string `json:"latest_model_build_sid,omitempty"`
	// Determine if queries are logged and stored
	LogQueries bool `json:"log_queries"`
	// Determine if the model needs rebuilding
	NeedsModelBuild *bool `json:"needs_model_build,omitempty"`
	// The unique alphanumeric string for the resource
	Sid string `json:"sid"`
	// The URL for the resource
	URL string `json:"url"`
	// The unique human readable name of the assistant
	UniqueName string `json:"unique_name"`
}

// Fetch retrieves an assistant resource
// See https://www.twilio.com/docs/autopilot/api/assistant#fetch-an-assistant-resource for more details
// Context is defaulted to Background. See https://golang.org/pkg/context/#Background for more information
func (c Client) Fetch() (*FetchAssistantResponse, error) {
	return c.FetchWithContext(context.Background())
}

// FetchWithContext retrieves an assistant resource
// See https://www.twilio.com/docs/autopilot/api/assistant#fetch-an-assistant-resource for more details
func (c Client) FetchWithContext(context context.Context) (*FetchAssistantResponse, error) {
	op := client.Operation{
		Method: http.MethodGet,
		URI:    "/Assistants/{sid}",
		PathParams: map[string]string{
			"sid": c.sid,
		},
	}

	response := &FetchAssistantResponse{}
	if err := c.client.Send(context, op, nil, response); err != nil {
		return nil, err
	}
	return response, nil
}
